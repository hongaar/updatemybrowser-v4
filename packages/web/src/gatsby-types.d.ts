/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
  type Maybe<T> = T | null;
  type InputMaybe<T> = T | null;
  type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
  type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
  };
  type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
  };
  /** All built-in and custom scalars, mapped to their actual values */
  type Scalars = {
    /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
    ID: string;
    /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
    String: string;
    /** The `Boolean` scalar type represents `true` or `false`. */
    Boolean: boolean;
    /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
    Int: number;
    /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
    Float: number;
    /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: string;
    GatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: Record<string, unknown>;
  };

  type BooleanQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Boolean"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
    readonly ne: InputMaybe<Scalars["Boolean"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
  };

  type DateQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Date"]>;
    readonly gt: InputMaybe<Scalars["Date"]>;
    readonly gte: InputMaybe<Scalars["Date"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
    readonly lt: InputMaybe<Scalars["Date"]>;
    readonly lte: InputMaybe<Scalars["Date"]>;
    readonly ne: InputMaybe<Scalars["Date"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
  };

  type Directory = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly changeTime: Scalars["Date"];
    readonly children: ReadonlyArray<Node>;
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type Directory_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type DirectoryConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<DirectoryEdge>;
    readonly group: ReadonlyArray<DirectoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Directory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryConnection_distinctArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_groupArgs = {
    field: DirectoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryConnection_maxArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_minArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_sumArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryEdge = {
    readonly next: Maybe<Directory>;
    readonly node: Directory;
    readonly previous: Maybe<Directory>;
  };

  type DirectoryFieldsEnum =
    | "absolutePath"
    | "accessTime"
    | "atime"
    | "atimeMs"
    | "base"
    | "birthTime"
    | "birthtime"
    | "birthtimeMs"
    | "changeTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "ctime"
    | "ctimeMs"
    | "dev"
    | "dir"
    | "ext"
    | "extension"
    | "gid"
    | "id"
    | "ino"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "mode"
    | "modifiedTime"
    | "mtime"
    | "mtimeMs"
    | "name"
    | "nlink"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "prettySize"
    | "rdev"
    | "relativeDirectory"
    | "relativePath"
    | "root"
    | "size"
    | "sourceInstanceName"
    | "uid";

  type DirectoryFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type DirectoryGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<DirectoryEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<DirectoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Directory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryGroupConnection_distinctArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_groupArgs = {
    field: DirectoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryGroupConnection_maxArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_minArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_sumArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectorySortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type File = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly changeTime: Scalars["Date"];
    readonly children: ReadonlyArray<Node>;
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type File_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type FileConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<FileEdge>;
    readonly group: ReadonlyArray<FileGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<File>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileConnection_distinctArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_groupArgs = {
    field: FileFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileConnection_maxArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_minArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_sumArgs = {
    field: FileFieldsEnum;
  };

  type FileEdge = {
    readonly next: Maybe<File>;
    readonly node: File;
    readonly previous: Maybe<File>;
  };

  type FileFieldsEnum =
    | "absolutePath"
    | "accessTime"
    | "atime"
    | "atimeMs"
    | "base"
    | "birthTime"
    | "birthtime"
    | "birthtimeMs"
    | "changeTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "ctime"
    | "ctimeMs"
    | "dev"
    | "dir"
    | "ext"
    | "extension"
    | "gid"
    | "id"
    | "ino"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "mode"
    | "modifiedTime"
    | "mtime"
    | "mtimeMs"
    | "name"
    | "nlink"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "prettySize"
    | "rdev"
    | "relativeDirectory"
    | "relativePath"
    | "root"
    | "size"
    | "sourceInstanceName"
    | "uid";

  type FileFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type FileGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<FileEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<FileGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<File>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileGroupConnection_distinctArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_groupArgs = {
    field: FileFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileGroupConnection_maxArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_minArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_sumArgs = {
    field: FileFieldsEnum;
  };

  type FileSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type FloatQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Float"]>;
    readonly gt: InputMaybe<Scalars["Float"]>;
    readonly gte: InputMaybe<Scalars["Float"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
    readonly lt: InputMaybe<Scalars["Float"]>;
    readonly lte: InputMaybe<Scalars["Float"]>;
    readonly ne: InputMaybe<Scalars["Float"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
  };

  type GatsbyImageDataQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly in: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>
    >;
    readonly ne: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly nin: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>
    >;
  };

  type GatsbyImageFormat = "auto" | "avif" | "jpg" | "" | "png" | "webp";

  type GatsbyImageLayout = "constrained" | "fixed" | "fullWidth";

  type GatsbyImagePlaceholder =
    | "blurred"
    | "dominantColor"
    | "none"
    | "tracedSVG";

  type IntQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Int"]>;
    readonly gt: InputMaybe<Scalars["Int"]>;
    readonly gte: InputMaybe<Scalars["Int"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    readonly lt: InputMaybe<Scalars["Int"]>;
    readonly lte: InputMaybe<Scalars["Int"]>;
    readonly ne: InputMaybe<Scalars["Int"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
  };

  type Internal = {
    readonly content: Maybe<Scalars["String"]>;
    readonly contentDigest: Scalars["String"];
    readonly contentFilePath: Maybe<Scalars["String"]>;
    readonly description: Maybe<Scalars["String"]>;
    readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly ignoreType: Maybe<Scalars["Boolean"]>;
    readonly mediaType: Maybe<Scalars["String"]>;
    readonly owner: Scalars["String"];
    readonly type: Scalars["String"];
  };

  type InternalFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>;
    readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
    readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
    readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
    readonly mediaType: InputMaybe<StringQueryOperatorInput>;
    readonly owner: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type JSONQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["JSON"]>;
    readonly glob: InputMaybe<Scalars["JSON"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
    readonly ne: InputMaybe<Scalars["JSON"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
    readonly regex: InputMaybe<Scalars["JSON"]>;
  };

  /** Node Interface */
  type Node = {
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type NodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type NodeFilterListInput = {
    readonly elemMatch: InputMaybe<NodeFilterInput>;
  };

  type PageInfo = {
    readonly currentPage: Scalars["Int"];
    readonly hasNextPage: Scalars["Boolean"];
    readonly hasPreviousPage: Scalars["Boolean"];
    readonly itemCount: Scalars["Int"];
    readonly pageCount: Scalars["Int"];
    readonly perPage: Maybe<Scalars["Int"]>;
    readonly totalCount: Scalars["Int"];
  };

  type Query = {
    readonly allDirectory: DirectoryConnection;
    readonly allFile: FileConnection;
    readonly allSanityAuthor: SanityAuthorConnection;
    readonly allSanityCategory: SanityCategoryConnection;
    readonly allSanityFileAsset: SanityFileAssetConnection;
    readonly allSanityImageAsset: SanityImageAssetConnection;
    readonly allSanityPost: SanityPostConnection;
    readonly allSanitySiteSettings: SanitySiteSettingsConnection;
    readonly allSite: SiteConnection;
    readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
    readonly allSiteFunction: SiteFunctionConnection;
    readonly allSitePage: SitePageConnection;
    readonly allSitePlugin: SitePluginConnection;
    readonly directory: Maybe<Directory>;
    readonly file: Maybe<File>;
    readonly sanityAuthor: Maybe<SanityAuthor>;
    readonly sanityCategory: Maybe<SanityCategory>;
    readonly sanityFileAsset: Maybe<SanityFileAsset>;
    readonly sanityImageAsset: Maybe<SanityImageAsset>;
    readonly sanityPost: Maybe<SanityPost>;
    readonly sanitySiteSettings: Maybe<SanitySiteSettings>;
    readonly site: Maybe<Site>;
    readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
    readonly siteFunction: Maybe<SiteFunction>;
    readonly sitePage: Maybe<SitePage>;
    readonly sitePlugin: Maybe<SitePlugin>;
  };

  type Query_allDirectoryArgs = {
    filter: InputMaybe<DirectoryFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<DirectorySortInput>;
  };

  type Query_allFileArgs = {
    filter: InputMaybe<FileFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<FileSortInput>;
  };

  type Query_allSanityAuthorArgs = {
    filter: InputMaybe<SanityAuthorFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanityAuthorSortInput>;
  };

  type Query_allSanityCategoryArgs = {
    filter: InputMaybe<SanityCategoryFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanityCategorySortInput>;
  };

  type Query_allSanityFileAssetArgs = {
    filter: InputMaybe<SanityFileAssetFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanityFileAssetSortInput>;
  };

  type Query_allSanityImageAssetArgs = {
    filter: InputMaybe<SanityImageAssetFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanityImageAssetSortInput>;
  };

  type Query_allSanityPostArgs = {
    filter: InputMaybe<SanityPostFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanityPostSortInput>;
  };

  type Query_allSanitySiteSettingsArgs = {
    filter: InputMaybe<SanitySiteSettingsFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SanitySiteSettingsSortInput>;
  };

  type Query_allSiteArgs = {
    filter: InputMaybe<SiteFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteSortInput>;
  };

  type Query_allSiteBuildMetadataArgs = {
    filter: InputMaybe<SiteBuildMetadataFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteBuildMetadataSortInput>;
  };

  type Query_allSiteFunctionArgs = {
    filter: InputMaybe<SiteFunctionFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteFunctionSortInput>;
  };

  type Query_allSitePageArgs = {
    filter: InputMaybe<SitePageFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SitePageSortInput>;
  };

  type Query_allSitePluginArgs = {
    filter: InputMaybe<SitePluginFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SitePluginSortInput>;
  };

  type Query_directoryArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_fileArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_sanityAuthorArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rawBio: InputMaybe<JSONQueryOperatorInput>;
    _rawImage: InputMaybe<JSONQueryOperatorInput>;
    _rawSlug: InputMaybe<JSONQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    bio: InputMaybe<SanityBlockFilterListInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    image: InputMaybe<SanityMainImageFilterInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    slug: InputMaybe<SanitySlugFilterInput>;
  };

  type Query_sanityCategoryArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sanityFileAssetArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rawSource: InputMaybe<JSONQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    altText: InputMaybe<StringQueryOperatorInput>;
    assetId: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    label: InputMaybe<StringQueryOperatorInput>;
    mimeType: InputMaybe<StringQueryOperatorInput>;
    originalFilename: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    path: InputMaybe<StringQueryOperatorInput>;
    sha1hash: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<FloatQueryOperatorInput>;
    source: InputMaybe<SanityAssetSourceDataFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
    url: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sanityImageAssetArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rawMetadata: InputMaybe<JSONQueryOperatorInput>;
    _rawSource: InputMaybe<JSONQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    altText: InputMaybe<StringQueryOperatorInput>;
    assetId: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    filename: InputMaybe<StringQueryOperatorInput>;
    filesize: InputMaybe<IntQueryOperatorInput>;
    gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    height: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    label: InputMaybe<StringQueryOperatorInput>;
    metadata: InputMaybe<SanityImageMetadataFilterInput>;
    mimeType: InputMaybe<StringQueryOperatorInput>;
    originalFilename: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    path: InputMaybe<StringQueryOperatorInput>;
    publicUrl: InputMaybe<StringQueryOperatorInput>;
    resize: InputMaybe<RemoteFileResizeFilterInput>;
    sha1hash: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<FloatQueryOperatorInput>;
    source: InputMaybe<SanityAssetSourceDataFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
    uploadId: InputMaybe<StringQueryOperatorInput>;
    url: InputMaybe<StringQueryOperatorInput>;
    width: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_sanityPostArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rawAuthors: InputMaybe<JSONQueryOperatorInput>;
    _rawBody: InputMaybe<JSONQueryOperatorInput>;
    _rawCategories: InputMaybe<JSONQueryOperatorInput>;
    _rawExcerpt: InputMaybe<JSONQueryOperatorInput>;
    _rawMainImage: InputMaybe<JSONQueryOperatorInput>;
    _rawSlug: InputMaybe<JSONQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    authors: InputMaybe<SanityAuthorReferenceFilterListInput>;
    body: InputMaybe<SanityBlockFilterListInput>;
    categories: InputMaybe<SanityCategoryFilterListInput>;
    children: InputMaybe<NodeFilterListInput>;
    excerpt: InputMaybe<SanityBlockFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mainImage: InputMaybe<SanityMainImageFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
    publishedAt: InputMaybe<DateQueryOperatorInput>;
    slug: InputMaybe<SanitySlugFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sanitySiteSettingsArgs = {
    _createdAt: InputMaybe<DateQueryOperatorInput>;
    _id: InputMaybe<StringQueryOperatorInput>;
    _key: InputMaybe<StringQueryOperatorInput>;
    _rawAuthor: InputMaybe<JSONQueryOperatorInput>;
    _rev: InputMaybe<StringQueryOperatorInput>;
    _type: InputMaybe<StringQueryOperatorInput>;
    _updatedAt: InputMaybe<DateQueryOperatorInput>;
    author: InputMaybe<SanityAuthorFilterInput>;
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    keywords: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_siteArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    host: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pathPrefix: InputMaybe<StringQueryOperatorInput>;
    polyfill: InputMaybe<BooleanQueryOperatorInput>;
    port: InputMaybe<IntQueryOperatorInput>;
    siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_siteBuildMetadataArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
  };

  type Query_siteFunctionArgs = {
    absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    functionRoute: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginName: InputMaybe<StringQueryOperatorInput>;
    relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sitePageArgs = {
    children: InputMaybe<NodeFilterListInput>;
    component: InputMaybe<StringQueryOperatorInput>;
    componentChunkName: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    internalComponentName: InputMaybe<StringQueryOperatorInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    pageContext: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    path: InputMaybe<StringQueryOperatorInput>;
    pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type Query_sitePluginArgs = {
    browserAPIs: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    packageJson: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    resolve: InputMaybe<StringQueryOperatorInput>;
    ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    version: InputMaybe<StringQueryOperatorInput>;
  };

  /** Remote Interface */
  type RemoteFile = {
    readonly filename: Scalars["String"];
    readonly filesize: Maybe<Scalars["Int"]>;
    /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
    readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
    readonly height: Maybe<Scalars["Int"]>;
    readonly id: Scalars["ID"];
    readonly mimeType: Scalars["String"];
    readonly publicUrl: Scalars["String"];
    readonly resize: Maybe<RemoteFileResize>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  /** Remote Interface */
  type RemoteFile_gatsbyImageArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
    fit?: InputMaybe<RemoteFileFit>;
    formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
    height: InputMaybe<Scalars["Int"]>;
    layout?: InputMaybe<RemoteFileLayout>;
    outputPixelDensities?: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["Float"]>>
    >;
    placeholder?: InputMaybe<RemoteFilePlaceholder>;
    quality?: InputMaybe<Scalars["Int"]>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  /** Remote Interface */
  type RemoteFile_resizeArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
    fit?: InputMaybe<RemoteFileFit>;
    format?: InputMaybe<RemoteFileFormat>;
    height: InputMaybe<Scalars["Int"]>;
    quality?: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type RemoteFileCropFocus =
    | "bottom"
    | "center"
    | "edges"
    | "entropy"
    | "faces"
    | "left"
    | "right"
    | "top";

  type RemoteFileFit = "contain" | "cover" | "fill" | "outside";

  type RemoteFileFormat = "auto" | "avif" | "jpg" | "png" | "webp";

  type RemoteFileLayout = "constrained" | "fixed" | "fullWidth";

  type RemoteFilePlaceholder =
    | "blurred"
    | "dominantColor"
    | "none"
    | "tracedSVG";

  type RemoteFileResize = {
    readonly height: Maybe<Scalars["Int"]>;
    readonly src: Maybe<Scalars["String"]>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  type RemoteFileResizeFilterInput = {
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type SanityAssetSourceData = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly id: Maybe<Scalars["String"]>;
    readonly name: Maybe<Scalars["String"]>;
    readonly url: Maybe<Scalars["String"]>;
  };

  type SanityAssetSourceDataFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityAuthor = Node &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rawBio: Maybe<Scalars["JSON"]>;
      readonly _rawImage: Maybe<Scalars["JSON"]>;
      readonly _rawSlug: Maybe<Scalars["JSON"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly bio: Maybe<ReadonlyArray<Maybe<SanityBlock>>>;
      readonly children: ReadonlyArray<Node>;
      readonly id: Scalars["ID"];
      readonly image: Maybe<SanityMainImage>;
      readonly internal: Internal;
      readonly name: Maybe<Scalars["String"]>;
      readonly parent: Maybe<Node>;
      readonly slug: Maybe<SanitySlug>;
    };

  type SanityAuthor__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityAuthor__rawBioArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityAuthor__rawImageArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityAuthor__rawSlugArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityAuthor__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityAuthorConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityAuthorEdge>;
    readonly group: ReadonlyArray<SanityAuthorGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityAuthor>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityAuthorConnection_distinctArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorConnection_groupArgs = {
    field: SanityAuthorFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityAuthorConnection_maxArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorConnection_minArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorConnection_sumArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorEdge = {
    readonly next: Maybe<SanityAuthor>;
    readonly node: SanityAuthor;
    readonly previous: Maybe<SanityAuthor>;
  };

  type SanityAuthorFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rawBio"
    | "_rawImage"
    | "_rawSlug"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "bio"
    | "bio._key"
    | "bio._rawChildren"
    | "bio._type"
    | "bio.children"
    | "bio.children._key"
    | "bio.children._type"
    | "bio.children.marks"
    | "bio.children.text"
    | "bio.list"
    | "bio.style"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "id"
    | "image._key"
    | "image._rawAsset"
    | "image._rawCrop"
    | "image._rawHotspot"
    | "image._type"
    | "image.alt"
    | "image.asset._createdAt"
    | "image.asset._id"
    | "image.asset._key"
    | "image.asset._rawMetadata"
    | "image.asset._rawSource"
    | "image.asset._rev"
    | "image.asset._type"
    | "image.asset._updatedAt"
    | "image.asset.altText"
    | "image.asset.assetId"
    | "image.asset.children"
    | "image.asset.children.children"
    | "image.asset.children.id"
    | "image.asset.description"
    | "image.asset.extension"
    | "image.asset.filename"
    | "image.asset.filesize"
    | "image.asset.gatsbyImage"
    | "image.asset.gatsbyImageData"
    | "image.asset.height"
    | "image.asset.id"
    | "image.asset.internal.content"
    | "image.asset.internal.contentDigest"
    | "image.asset.internal.contentFilePath"
    | "image.asset.internal.description"
    | "image.asset.internal.fieldOwners"
    | "image.asset.internal.ignoreType"
    | "image.asset.internal.mediaType"
    | "image.asset.internal.owner"
    | "image.asset.internal.type"
    | "image.asset.label"
    | "image.asset.metadata._key"
    | "image.asset.metadata._rawDimensions"
    | "image.asset.metadata._rawLocation"
    | "image.asset.metadata._rawPalette"
    | "image.asset.metadata._type"
    | "image.asset.metadata.blurHash"
    | "image.asset.metadata.hasAlpha"
    | "image.asset.metadata.isOpaque"
    | "image.asset.metadata.lqip"
    | "image.asset.mimeType"
    | "image.asset.originalFilename"
    | "image.asset.parent.children"
    | "image.asset.parent.id"
    | "image.asset.path"
    | "image.asset.publicUrl"
    | "image.asset.resize.height"
    | "image.asset.resize.src"
    | "image.asset.resize.width"
    | "image.asset.sha1hash"
    | "image.asset.size"
    | "image.asset.source._key"
    | "image.asset.source._type"
    | "image.asset.source.id"
    | "image.asset.source.name"
    | "image.asset.source.url"
    | "image.asset.title"
    | "image.asset.uploadId"
    | "image.asset.url"
    | "image.asset.width"
    | "image.caption"
    | "image.crop._key"
    | "image.crop._type"
    | "image.crop.bottom"
    | "image.crop.left"
    | "image.crop.right"
    | "image.crop.top"
    | "image.hotspot._key"
    | "image.hotspot._type"
    | "image.hotspot.height"
    | "image.hotspot.width"
    | "image.hotspot.x"
    | "image.hotspot.y"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "name"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "slug._key"
    | "slug._type"
    | "slug.current";

  type SanityAuthorFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawBio: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawImage: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawSlug: InputMaybe<JSONQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly bio: InputMaybe<SanityBlockFilterListInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly image: InputMaybe<SanityMainImageFilterInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly slug: InputMaybe<SanitySlugFilterInput>;
  };

  type SanityAuthorGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityAuthorEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanityAuthorGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityAuthor>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityAuthorGroupConnection_distinctArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorGroupConnection_groupArgs = {
    field: SanityAuthorFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityAuthorGroupConnection_maxArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorGroupConnection_minArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorGroupConnection_sumArgs = {
    field: SanityAuthorFieldsEnum;
  };

  type SanityAuthorReference = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawAuthor: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly author: Maybe<SanityAuthor>;
  };

  type SanityAuthorReference__rawAuthorArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityAuthorReferenceFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawAuthor: InputMaybe<JSONQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly author: InputMaybe<SanityAuthorFilterInput>;
  };

  type SanityAuthorReferenceFilterListInput = {
    readonly elemMatch: InputMaybe<SanityAuthorReferenceFilterInput>;
  };

  type SanityAuthorReferenceOrSpan = SanityAuthorReference | SanitySpan;

  type SanityAuthorSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanityAuthorFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SanityBlock = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawChildren: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly children: Maybe<ReadonlyArray<Maybe<SanitySpan>>>;
    readonly list: Maybe<Scalars["String"]>;
    readonly style: Maybe<Scalars["String"]>;
  };

  type SanityBlock__rawChildrenArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityBlockFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawChildren: InputMaybe<JSONQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<SanitySpanFilterListInput>;
    readonly list: InputMaybe<StringQueryOperatorInput>;
    readonly style: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityBlockFilterListInput = {
    readonly elemMatch: InputMaybe<SanityBlockFilterInput>;
  };

  type SanityBlockOrMainImage = SanityBlock | SanityMainImage;

  type SanityCategory = Node &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly children: ReadonlyArray<Node>;
      readonly description: Maybe<Scalars["String"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly parent: Maybe<Node>;
      readonly title: Maybe<Scalars["String"]>;
    };

  type SanityCategory__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityCategory__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityCategoryConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityCategoryEdge>;
    readonly group: ReadonlyArray<SanityCategoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityCategory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityCategoryConnection_distinctArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryConnection_groupArgs = {
    field: SanityCategoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityCategoryConnection_maxArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryConnection_minArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryConnection_sumArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryEdge = {
    readonly next: Maybe<SanityCategory>;
    readonly node: SanityCategory;
    readonly previous: Maybe<SanityCategory>;
  };

  type SanityCategoryFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "description"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "title";

  type SanityCategoryFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityCategoryFilterListInput = {
    readonly elemMatch: InputMaybe<SanityCategoryFilterInput>;
  };

  type SanityCategoryGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityCategoryEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanityCategoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityCategory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityCategoryGroupConnection_distinctArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryGroupConnection_groupArgs = {
    field: SanityCategoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityCategoryGroupConnection_maxArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryGroupConnection_minArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategoryGroupConnection_sumArgs = {
    field: SanityCategoryFieldsEnum;
  };

  type SanityCategorySortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanityCategoryFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  /** A Sanity document */
  type SanityDocument = {
    readonly _createdAt: Maybe<Scalars["Date"]>;
    readonly _id: Maybe<Scalars["String"]>;
    readonly _rev: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly _updatedAt: Maybe<Scalars["Date"]>;
  };

  type SanityFile = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawAsset: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly asset: Maybe<SanityFileAsset>;
  };

  type SanityFile__rawAssetArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityFileAsset = Node &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rawSource: Maybe<Scalars["JSON"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly altText: Maybe<Scalars["String"]>;
      readonly assetId: Maybe<Scalars["String"]>;
      readonly children: ReadonlyArray<Node>;
      readonly description: Maybe<Scalars["String"]>;
      readonly extension: Maybe<Scalars["String"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly label: Maybe<Scalars["String"]>;
      readonly mimeType: Maybe<Scalars["String"]>;
      readonly originalFilename: Maybe<Scalars["String"]>;
      readonly parent: Maybe<Node>;
      readonly path: Maybe<Scalars["String"]>;
      readonly sha1hash: Maybe<Scalars["String"]>;
      readonly size: Maybe<Scalars["Float"]>;
      readonly source: Maybe<SanityAssetSourceData>;
      readonly title: Maybe<Scalars["String"]>;
      readonly url: Maybe<Scalars["String"]>;
    };

  type SanityFileAsset__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityFileAsset__rawSourceArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityFileAsset__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityFileAssetConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityFileAssetEdge>;
    readonly group: ReadonlyArray<SanityFileAssetGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityFileAsset>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityFileAssetConnection_distinctArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetConnection_groupArgs = {
    field: SanityFileAssetFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityFileAssetConnection_maxArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetConnection_minArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetConnection_sumArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetEdge = {
    readonly next: Maybe<SanityFileAsset>;
    readonly node: SanityFileAsset;
    readonly previous: Maybe<SanityFileAsset>;
  };

  type SanityFileAssetFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rawSource"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "altText"
    | "assetId"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "description"
    | "extension"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "label"
    | "mimeType"
    | "originalFilename"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "path"
    | "sha1hash"
    | "size"
    | "source._key"
    | "source._type"
    | "source.id"
    | "source.name"
    | "source.url"
    | "title"
    | "url";

  type SanityFileAssetFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawSource: InputMaybe<JSONQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly altText: InputMaybe<StringQueryOperatorInput>;
    readonly assetId: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly label: InputMaybe<StringQueryOperatorInput>;
    readonly mimeType: InputMaybe<StringQueryOperatorInput>;
    readonly originalFilename: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly path: InputMaybe<StringQueryOperatorInput>;
    readonly sha1hash: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<FloatQueryOperatorInput>;
    readonly source: InputMaybe<SanityAssetSourceDataFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityFileAssetGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityFileAssetEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanityFileAssetGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityFileAsset>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityFileAssetGroupConnection_distinctArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetGroupConnection_groupArgs = {
    field: SanityFileAssetFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityFileAssetGroupConnection_maxArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetGroupConnection_minArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetGroupConnection_sumArgs = {
    field: SanityFileAssetFieldsEnum;
  };

  type SanityFileAssetSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanityFileAssetFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SanityGatsbyImagePlaceholder = "blurred" | "dominantColor" | "none";

  type SanityGeopoint = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly alt: Maybe<Scalars["Float"]>;
    readonly lat: Maybe<Scalars["Float"]>;
    readonly lng: Maybe<Scalars["Float"]>;
  };

  type SanityGeopointFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly alt: InputMaybe<FloatQueryOperatorInput>;
    readonly lat: InputMaybe<FloatQueryOperatorInput>;
    readonly lng: InputMaybe<FloatQueryOperatorInput>;
  };

  type SanityImage = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawAsset: Maybe<Scalars["JSON"]>;
    readonly _rawCrop: Maybe<Scalars["JSON"]>;
    readonly _rawHotspot: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly asset: Maybe<SanityImageAsset>;
    readonly crop: Maybe<SanityImageCrop>;
    readonly hotspot: Maybe<SanityImageHotspot>;
  };

  type SanityImage__rawAssetArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImage__rawCropArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImage__rawHotspotArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageAsset = Node &
    RemoteFile &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rawMetadata: Maybe<Scalars["JSON"]>;
      readonly _rawSource: Maybe<Scalars["JSON"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly altText: Maybe<Scalars["String"]>;
      readonly assetId: Maybe<Scalars["String"]>;
      readonly children: ReadonlyArray<Node>;
      readonly description: Maybe<Scalars["String"]>;
      readonly extension: Maybe<Scalars["String"]>;
      readonly filename: Scalars["String"];
      readonly filesize: Maybe<Scalars["Int"]>;
      /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
      readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
      readonly gatsbyImageData: Scalars["GatsbyImageData"];
      readonly height: Maybe<Scalars["Int"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly label: Maybe<Scalars["String"]>;
      readonly metadata: Maybe<SanityImageMetadata>;
      readonly mimeType: Scalars["String"];
      readonly originalFilename: Maybe<Scalars["String"]>;
      readonly parent: Maybe<Node>;
      readonly path: Maybe<Scalars["String"]>;
      readonly publicUrl: Scalars["String"];
      readonly resize: Maybe<RemoteFileResize>;
      readonly sha1hash: Maybe<Scalars["String"]>;
      readonly size: Maybe<Scalars["Float"]>;
      readonly source: Maybe<SanityAssetSourceData>;
      readonly title: Maybe<Scalars["String"]>;
      readonly uploadId: Maybe<Scalars["String"]>;
      readonly url: Maybe<Scalars["String"]>;
      readonly width: Maybe<Scalars["Int"]>;
    };

  type SanityImageAsset__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityImageAsset__rawMetadataArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageAsset__rawSourceArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageAsset__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityImageAsset_gatsbyImageArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
    fit?: InputMaybe<RemoteFileFit>;
    formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
    height: InputMaybe<Scalars["Int"]>;
    layout?: InputMaybe<RemoteFileLayout>;
    outputPixelDensities?: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["Float"]>>
    >;
    placeholder?: InputMaybe<RemoteFilePlaceholder>;
    quality?: InputMaybe<Scalars["Int"]>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type SanityImageAsset_gatsbyImageDataArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    fit?: InputMaybe<SanityImageFit>;
    formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
    height: InputMaybe<Scalars["Int"]>;
    layout: InputMaybe<GatsbyImageLayout>;
    outputPixelDensities: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["Float"]>>
    >;
    placeholder?: InputMaybe<SanityGatsbyImagePlaceholder>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type SanityImageAsset_resizeArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
    fit?: InputMaybe<RemoteFileFit>;
    format?: InputMaybe<RemoteFileFormat>;
    height: InputMaybe<Scalars["Int"]>;
    quality?: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type SanityImageAssetConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityImageAssetEdge>;
    readonly group: ReadonlyArray<SanityImageAssetGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityImageAsset>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityImageAssetConnection_distinctArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetConnection_groupArgs = {
    field: SanityImageAssetFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityImageAssetConnection_maxArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetConnection_minArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetConnection_sumArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetEdge = {
    readonly next: Maybe<SanityImageAsset>;
    readonly node: SanityImageAsset;
    readonly previous: Maybe<SanityImageAsset>;
  };

  type SanityImageAssetFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rawMetadata"
    | "_rawSource"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "altText"
    | "assetId"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "description"
    | "extension"
    | "filename"
    | "filesize"
    | "gatsbyImage"
    | "gatsbyImageData"
    | "height"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "label"
    | "metadata._key"
    | "metadata._rawDimensions"
    | "metadata._rawLocation"
    | "metadata._rawPalette"
    | "metadata._type"
    | "metadata.blurHash"
    | "metadata.dimensions._key"
    | "metadata.dimensions._type"
    | "metadata.dimensions.aspectRatio"
    | "metadata.dimensions.height"
    | "metadata.dimensions.width"
    | "metadata.hasAlpha"
    | "metadata.isOpaque"
    | "metadata.location._key"
    | "metadata.location._type"
    | "metadata.location.alt"
    | "metadata.location.lat"
    | "metadata.location.lng"
    | "metadata.lqip"
    | "metadata.palette._key"
    | "metadata.palette._rawDarkMuted"
    | "metadata.palette._rawDarkVibrant"
    | "metadata.palette._rawDominant"
    | "metadata.palette._rawLightMuted"
    | "metadata.palette._rawLightVibrant"
    | "metadata.palette._rawMuted"
    | "metadata.palette._rawVibrant"
    | "metadata.palette._type"
    | "metadata.palette.darkMuted._key"
    | "metadata.palette.darkMuted._type"
    | "metadata.palette.darkMuted.background"
    | "metadata.palette.darkMuted.foreground"
    | "metadata.palette.darkMuted.population"
    | "metadata.palette.darkMuted.title"
    | "metadata.palette.darkVibrant._key"
    | "metadata.palette.darkVibrant._type"
    | "metadata.palette.darkVibrant.background"
    | "metadata.palette.darkVibrant.foreground"
    | "metadata.palette.darkVibrant.population"
    | "metadata.palette.darkVibrant.title"
    | "metadata.palette.dominant._key"
    | "metadata.palette.dominant._type"
    | "metadata.palette.dominant.background"
    | "metadata.palette.dominant.foreground"
    | "metadata.palette.dominant.population"
    | "metadata.palette.dominant.title"
    | "metadata.palette.lightMuted._key"
    | "metadata.palette.lightMuted._type"
    | "metadata.palette.lightMuted.background"
    | "metadata.palette.lightMuted.foreground"
    | "metadata.palette.lightMuted.population"
    | "metadata.palette.lightMuted.title"
    | "metadata.palette.lightVibrant._key"
    | "metadata.palette.lightVibrant._type"
    | "metadata.palette.lightVibrant.background"
    | "metadata.palette.lightVibrant.foreground"
    | "metadata.palette.lightVibrant.population"
    | "metadata.palette.lightVibrant.title"
    | "metadata.palette.muted._key"
    | "metadata.palette.muted._type"
    | "metadata.palette.muted.background"
    | "metadata.palette.muted.foreground"
    | "metadata.palette.muted.population"
    | "metadata.palette.muted.title"
    | "metadata.palette.vibrant._key"
    | "metadata.palette.vibrant._type"
    | "metadata.palette.vibrant.background"
    | "metadata.palette.vibrant.foreground"
    | "metadata.palette.vibrant.population"
    | "metadata.palette.vibrant.title"
    | "mimeType"
    | "originalFilename"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "path"
    | "publicUrl"
    | "resize.height"
    | "resize.src"
    | "resize.width"
    | "sha1hash"
    | "size"
    | "source._key"
    | "source._type"
    | "source.id"
    | "source.name"
    | "source.url"
    | "title"
    | "uploadId"
    | "url"
    | "width";

  type SanityImageAssetFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawMetadata: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawSource: InputMaybe<JSONQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly altText: InputMaybe<StringQueryOperatorInput>;
    readonly assetId: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly filename: InputMaybe<StringQueryOperatorInput>;
    readonly filesize: InputMaybe<IntQueryOperatorInput>;
    readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly label: InputMaybe<StringQueryOperatorInput>;
    readonly metadata: InputMaybe<SanityImageMetadataFilterInput>;
    readonly mimeType: InputMaybe<StringQueryOperatorInput>;
    readonly originalFilename: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly path: InputMaybe<StringQueryOperatorInput>;
    readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
    readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
    readonly sha1hash: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<FloatQueryOperatorInput>;
    readonly source: InputMaybe<SanityAssetSourceDataFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
    readonly uploadId: InputMaybe<StringQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type SanityImageAssetGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityImageAssetEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanityImageAssetGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityImageAsset>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityImageAssetGroupConnection_distinctArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetGroupConnection_groupArgs = {
    field: SanityImageAssetFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityImageAssetGroupConnection_maxArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetGroupConnection_minArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetGroupConnection_sumArgs = {
    field: SanityImageAssetFieldsEnum;
  };

  type SanityImageAssetSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanityImageAssetFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SanityImageCrop = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly bottom: Maybe<Scalars["Float"]>;
    readonly left: Maybe<Scalars["Float"]>;
    readonly right: Maybe<Scalars["Float"]>;
    readonly top: Maybe<Scalars["Float"]>;
  };

  type SanityImageCropFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly bottom: InputMaybe<FloatQueryOperatorInput>;
    readonly left: InputMaybe<FloatQueryOperatorInput>;
    readonly right: InputMaybe<FloatQueryOperatorInput>;
    readonly top: InputMaybe<FloatQueryOperatorInput>;
  };

  type SanityImageDimensions = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly aspectRatio: Maybe<Scalars["Float"]>;
    readonly height: Maybe<Scalars["Float"]>;
    readonly width: Maybe<Scalars["Float"]>;
  };

  type SanityImageDimensionsFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
    readonly height: InputMaybe<FloatQueryOperatorInput>;
    readonly width: InputMaybe<FloatQueryOperatorInput>;
  };

  type SanityImageFit =
    | "clip"
    | "crop"
    | "fill"
    | "fillmax"
    | "max"
    | "min"
    | "scale";

  type SanityImageHotspot = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly height: Maybe<Scalars["Float"]>;
    readonly width: Maybe<Scalars["Float"]>;
    readonly x: Maybe<Scalars["Float"]>;
    readonly y: Maybe<Scalars["Float"]>;
  };

  type SanityImageHotspotFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly height: InputMaybe<FloatQueryOperatorInput>;
    readonly width: InputMaybe<FloatQueryOperatorInput>;
    readonly x: InputMaybe<FloatQueryOperatorInput>;
    readonly y: InputMaybe<FloatQueryOperatorInput>;
  };

  type SanityImageMetadata = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawDimensions: Maybe<Scalars["JSON"]>;
    readonly _rawLocation: Maybe<Scalars["JSON"]>;
    readonly _rawPalette: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly blurHash: Maybe<Scalars["String"]>;
    readonly dimensions: Maybe<SanityImageDimensions>;
    readonly hasAlpha: Maybe<Scalars["Boolean"]>;
    readonly isOpaque: Maybe<Scalars["Boolean"]>;
    readonly location: Maybe<SanityGeopoint>;
    readonly lqip: Maybe<Scalars["String"]>;
    readonly palette: Maybe<SanityImagePalette>;
  };

  type SanityImageMetadata__rawDimensionsArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageMetadata__rawLocationArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageMetadata__rawPaletteArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImageMetadataFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawDimensions: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawLocation: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawPalette: InputMaybe<JSONQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly blurHash: InputMaybe<StringQueryOperatorInput>;
    readonly dimensions: InputMaybe<SanityImageDimensionsFilterInput>;
    readonly hasAlpha: InputMaybe<BooleanQueryOperatorInput>;
    readonly isOpaque: InputMaybe<BooleanQueryOperatorInput>;
    readonly location: InputMaybe<SanityGeopointFilterInput>;
    readonly lqip: InputMaybe<StringQueryOperatorInput>;
    readonly palette: InputMaybe<SanityImagePaletteFilterInput>;
  };

  type SanityImagePalette = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawDarkMuted: Maybe<Scalars["JSON"]>;
    readonly _rawDarkVibrant: Maybe<Scalars["JSON"]>;
    readonly _rawDominant: Maybe<Scalars["JSON"]>;
    readonly _rawLightMuted: Maybe<Scalars["JSON"]>;
    readonly _rawLightVibrant: Maybe<Scalars["JSON"]>;
    readonly _rawMuted: Maybe<Scalars["JSON"]>;
    readonly _rawVibrant: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly darkMuted: Maybe<SanityImagePaletteSwatch>;
    readonly darkVibrant: Maybe<SanityImagePaletteSwatch>;
    readonly dominant: Maybe<SanityImagePaletteSwatch>;
    readonly lightMuted: Maybe<SanityImagePaletteSwatch>;
    readonly lightVibrant: Maybe<SanityImagePaletteSwatch>;
    readonly muted: Maybe<SanityImagePaletteSwatch>;
    readonly vibrant: Maybe<SanityImagePaletteSwatch>;
  };

  type SanityImagePalette__rawDarkMutedArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawDarkVibrantArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawDominantArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawLightMutedArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawLightVibrantArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawMutedArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePalette__rawVibrantArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityImagePaletteFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawDarkMuted: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawDarkVibrant: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawDominant: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawLightMuted: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawLightVibrant: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawMuted: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawVibrant: InputMaybe<JSONQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly darkMuted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly darkVibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly dominant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly lightMuted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly lightVibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly muted: InputMaybe<SanityImagePaletteSwatchFilterInput>;
    readonly vibrant: InputMaybe<SanityImagePaletteSwatchFilterInput>;
  };

  type SanityImagePaletteSwatch = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly background: Maybe<Scalars["String"]>;
    readonly foreground: Maybe<Scalars["String"]>;
    readonly population: Maybe<Scalars["Float"]>;
    readonly title: Maybe<Scalars["String"]>;
  };

  type SanityImagePaletteSwatchFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly background: InputMaybe<StringQueryOperatorInput>;
    readonly foreground: InputMaybe<StringQueryOperatorInput>;
    readonly population: InputMaybe<FloatQueryOperatorInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityMainImage = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _rawAsset: Maybe<Scalars["JSON"]>;
    readonly _rawCrop: Maybe<Scalars["JSON"]>;
    readonly _rawHotspot: Maybe<Scalars["JSON"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly alt: Maybe<Scalars["String"]>;
    readonly asset: Maybe<SanityImageAsset>;
    readonly caption: Maybe<Scalars["String"]>;
    readonly crop: Maybe<SanityImageCrop>;
    readonly hotspot: Maybe<SanityImageHotspot>;
  };

  type SanityMainImage__rawAssetArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityMainImage__rawCropArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityMainImage__rawHotspotArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityMainImageFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawAsset: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawCrop: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawHotspot: InputMaybe<JSONQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly alt: InputMaybe<StringQueryOperatorInput>;
    readonly asset: InputMaybe<SanityImageAssetFilterInput>;
    readonly caption: InputMaybe<StringQueryOperatorInput>;
    readonly crop: InputMaybe<SanityImageCropFilterInput>;
    readonly hotspot: InputMaybe<SanityImageHotspotFilterInput>;
  };

  type SanityPost = Node &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rawAuthors: Maybe<Scalars["JSON"]>;
      readonly _rawBody: Maybe<Scalars["JSON"]>;
      readonly _rawCategories: Maybe<Scalars["JSON"]>;
      readonly _rawExcerpt: Maybe<Scalars["JSON"]>;
      readonly _rawMainImage: Maybe<Scalars["JSON"]>;
      readonly _rawSlug: Maybe<Scalars["JSON"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly authors: Maybe<ReadonlyArray<Maybe<SanityAuthorReference>>>;
      readonly body: Maybe<ReadonlyArray<Maybe<SanityBlock>>>;
      readonly categories: Maybe<ReadonlyArray<Maybe<SanityCategory>>>;
      readonly children: ReadonlyArray<Node>;
      readonly excerpt: Maybe<ReadonlyArray<Maybe<SanityBlock>>>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly mainImage: Maybe<SanityMainImage>;
      readonly parent: Maybe<Node>;
      readonly publishedAt: Maybe<Scalars["Date"]>;
      readonly slug: Maybe<SanitySlug>;
      readonly title: Maybe<Scalars["String"]>;
    };

  type SanityPost__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityPost__rawAuthorsArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__rawBodyArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__rawCategoriesArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__rawExcerptArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__rawMainImageArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__rawSlugArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanityPost__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityPost_publishedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanityPostConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityPostEdge>;
    readonly group: ReadonlyArray<SanityPostGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityPost>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityPostConnection_distinctArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostConnection_groupArgs = {
    field: SanityPostFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityPostConnection_maxArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostConnection_minArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostConnection_sumArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostEdge = {
    readonly next: Maybe<SanityPost>;
    readonly node: SanityPost;
    readonly previous: Maybe<SanityPost>;
  };

  type SanityPostFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rawAuthors"
    | "_rawBody"
    | "_rawCategories"
    | "_rawExcerpt"
    | "_rawMainImage"
    | "_rawSlug"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "authors"
    | "authors._key"
    | "authors._rawAuthor"
    | "authors._type"
    | "authors.author._createdAt"
    | "authors.author._id"
    | "authors.author._key"
    | "authors.author._rawBio"
    | "authors.author._rawImage"
    | "authors.author._rawSlug"
    | "authors.author._rev"
    | "authors.author._type"
    | "authors.author._updatedAt"
    | "authors.author.bio"
    | "authors.author.bio._key"
    | "authors.author.bio._rawChildren"
    | "authors.author.bio._type"
    | "authors.author.bio.children"
    | "authors.author.bio.list"
    | "authors.author.bio.style"
    | "authors.author.children"
    | "authors.author.children.children"
    | "authors.author.children.id"
    | "authors.author.id"
    | "authors.author.image._key"
    | "authors.author.image._rawAsset"
    | "authors.author.image._rawCrop"
    | "authors.author.image._rawHotspot"
    | "authors.author.image._type"
    | "authors.author.image.alt"
    | "authors.author.image.caption"
    | "authors.author.internal.content"
    | "authors.author.internal.contentDigest"
    | "authors.author.internal.contentFilePath"
    | "authors.author.internal.description"
    | "authors.author.internal.fieldOwners"
    | "authors.author.internal.ignoreType"
    | "authors.author.internal.mediaType"
    | "authors.author.internal.owner"
    | "authors.author.internal.type"
    | "authors.author.name"
    | "authors.author.parent.children"
    | "authors.author.parent.id"
    | "authors.author.slug._key"
    | "authors.author.slug._type"
    | "authors.author.slug.current"
    | "body"
    | "body._key"
    | "body._rawChildren"
    | "body._type"
    | "body.children"
    | "body.children._key"
    | "body.children._type"
    | "body.children.marks"
    | "body.children.text"
    | "body.list"
    | "body.style"
    | "categories"
    | "categories._createdAt"
    | "categories._id"
    | "categories._key"
    | "categories._rev"
    | "categories._type"
    | "categories._updatedAt"
    | "categories.children"
    | "categories.children.children"
    | "categories.children.children.children"
    | "categories.children.children.id"
    | "categories.children.id"
    | "categories.children.internal.content"
    | "categories.children.internal.contentDigest"
    | "categories.children.internal.contentFilePath"
    | "categories.children.internal.description"
    | "categories.children.internal.fieldOwners"
    | "categories.children.internal.ignoreType"
    | "categories.children.internal.mediaType"
    | "categories.children.internal.owner"
    | "categories.children.internal.type"
    | "categories.children.parent.children"
    | "categories.children.parent.id"
    | "categories.description"
    | "categories.id"
    | "categories.internal.content"
    | "categories.internal.contentDigest"
    | "categories.internal.contentFilePath"
    | "categories.internal.description"
    | "categories.internal.fieldOwners"
    | "categories.internal.ignoreType"
    | "categories.internal.mediaType"
    | "categories.internal.owner"
    | "categories.internal.type"
    | "categories.parent.children"
    | "categories.parent.children.children"
    | "categories.parent.children.id"
    | "categories.parent.id"
    | "categories.parent.internal.content"
    | "categories.parent.internal.contentDigest"
    | "categories.parent.internal.contentFilePath"
    | "categories.parent.internal.description"
    | "categories.parent.internal.fieldOwners"
    | "categories.parent.internal.ignoreType"
    | "categories.parent.internal.mediaType"
    | "categories.parent.internal.owner"
    | "categories.parent.internal.type"
    | "categories.parent.parent.children"
    | "categories.parent.parent.id"
    | "categories.title"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "excerpt"
    | "excerpt._key"
    | "excerpt._rawChildren"
    | "excerpt._type"
    | "excerpt.children"
    | "excerpt.children._key"
    | "excerpt.children._type"
    | "excerpt.children.marks"
    | "excerpt.children.text"
    | "excerpt.list"
    | "excerpt.style"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "mainImage._key"
    | "mainImage._rawAsset"
    | "mainImage._rawCrop"
    | "mainImage._rawHotspot"
    | "mainImage._type"
    | "mainImage.alt"
    | "mainImage.asset._createdAt"
    | "mainImage.asset._id"
    | "mainImage.asset._key"
    | "mainImage.asset._rawMetadata"
    | "mainImage.asset._rawSource"
    | "mainImage.asset._rev"
    | "mainImage.asset._type"
    | "mainImage.asset._updatedAt"
    | "mainImage.asset.altText"
    | "mainImage.asset.assetId"
    | "mainImage.asset.children"
    | "mainImage.asset.children.children"
    | "mainImage.asset.children.id"
    | "mainImage.asset.description"
    | "mainImage.asset.extension"
    | "mainImage.asset.filename"
    | "mainImage.asset.filesize"
    | "mainImage.asset.gatsbyImage"
    | "mainImage.asset.gatsbyImageData"
    | "mainImage.asset.height"
    | "mainImage.asset.id"
    | "mainImage.asset.internal.content"
    | "mainImage.asset.internal.contentDigest"
    | "mainImage.asset.internal.contentFilePath"
    | "mainImage.asset.internal.description"
    | "mainImage.asset.internal.fieldOwners"
    | "mainImage.asset.internal.ignoreType"
    | "mainImage.asset.internal.mediaType"
    | "mainImage.asset.internal.owner"
    | "mainImage.asset.internal.type"
    | "mainImage.asset.label"
    | "mainImage.asset.metadata._key"
    | "mainImage.asset.metadata._rawDimensions"
    | "mainImage.asset.metadata._rawLocation"
    | "mainImage.asset.metadata._rawPalette"
    | "mainImage.asset.metadata._type"
    | "mainImage.asset.metadata.blurHash"
    | "mainImage.asset.metadata.hasAlpha"
    | "mainImage.asset.metadata.isOpaque"
    | "mainImage.asset.metadata.lqip"
    | "mainImage.asset.mimeType"
    | "mainImage.asset.originalFilename"
    | "mainImage.asset.parent.children"
    | "mainImage.asset.parent.id"
    | "mainImage.asset.path"
    | "mainImage.asset.publicUrl"
    | "mainImage.asset.resize.height"
    | "mainImage.asset.resize.src"
    | "mainImage.asset.resize.width"
    | "mainImage.asset.sha1hash"
    | "mainImage.asset.size"
    | "mainImage.asset.source._key"
    | "mainImage.asset.source._type"
    | "mainImage.asset.source.id"
    | "mainImage.asset.source.name"
    | "mainImage.asset.source.url"
    | "mainImage.asset.title"
    | "mainImage.asset.uploadId"
    | "mainImage.asset.url"
    | "mainImage.asset.width"
    | "mainImage.caption"
    | "mainImage.crop._key"
    | "mainImage.crop._type"
    | "mainImage.crop.bottom"
    | "mainImage.crop.left"
    | "mainImage.crop.right"
    | "mainImage.crop.top"
    | "mainImage.hotspot._key"
    | "mainImage.hotspot._type"
    | "mainImage.hotspot.height"
    | "mainImage.hotspot.width"
    | "mainImage.hotspot.x"
    | "mainImage.hotspot.y"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "publishedAt"
    | "slug._key"
    | "slug._type"
    | "slug.current"
    | "title";

  type SanityPostFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawAuthors: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawBody: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawCategories: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawExcerpt: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawMainImage: InputMaybe<JSONQueryOperatorInput>;
    readonly _rawSlug: InputMaybe<JSONQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly authors: InputMaybe<SanityAuthorReferenceFilterListInput>;
    readonly body: InputMaybe<SanityBlockFilterListInput>;
    readonly categories: InputMaybe<SanityCategoryFilterListInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly excerpt: InputMaybe<SanityBlockFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mainImage: InputMaybe<SanityMainImageFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
    readonly slug: InputMaybe<SanitySlugFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SanityPostGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanityPostEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanityPostGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanityPost>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanityPostGroupConnection_distinctArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostGroupConnection_groupArgs = {
    field: SanityPostFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanityPostGroupConnection_maxArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostGroupConnection_minArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostGroupConnection_sumArgs = {
    field: SanityPostFieldsEnum;
  };

  type SanityPostSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanityPostFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SanityResolveReferencesConfiguration = {
    /** Max depth to resolve references to */
    readonly maxDepth: Scalars["Int"];
  };

  type SanitySiteSettings = Node &
    SanityDocument & {
      readonly _createdAt: Maybe<Scalars["Date"]>;
      readonly _id: Maybe<Scalars["String"]>;
      readonly _key: Maybe<Scalars["String"]>;
      readonly _rawAuthor: Maybe<Scalars["JSON"]>;
      readonly _rev: Maybe<Scalars["String"]>;
      readonly _type: Maybe<Scalars["String"]>;
      readonly _updatedAt: Maybe<Scalars["Date"]>;
      readonly author: Maybe<SanityAuthor>;
      readonly children: ReadonlyArray<Node>;
      readonly description: Maybe<Scalars["String"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly keywords: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
      readonly parent: Maybe<Node>;
      readonly title: Maybe<Scalars["String"]>;
    };

  type SanitySiteSettings__createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanitySiteSettings__rawAuthorArgs = {
    resolveReferences: InputMaybe<SanityResolveReferencesConfiguration>;
  };

  type SanitySiteSettings__updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SanitySiteSettingsConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanitySiteSettingsEdge>;
    readonly group: ReadonlyArray<SanitySiteSettingsGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanitySiteSettings>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanitySiteSettingsConnection_distinctArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsConnection_groupArgs = {
    field: SanitySiteSettingsFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanitySiteSettingsConnection_maxArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsConnection_minArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsConnection_sumArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsEdge = {
    readonly next: Maybe<SanitySiteSettings>;
    readonly node: SanitySiteSettings;
    readonly previous: Maybe<SanitySiteSettings>;
  };

  type SanitySiteSettingsFieldsEnum =
    | "_createdAt"
    | "_id"
    | "_key"
    | "_rawAuthor"
    | "_rev"
    | "_type"
    | "_updatedAt"
    | "author._createdAt"
    | "author._id"
    | "author._key"
    | "author._rawBio"
    | "author._rawImage"
    | "author._rawSlug"
    | "author._rev"
    | "author._type"
    | "author._updatedAt"
    | "author.bio"
    | "author.bio._key"
    | "author.bio._rawChildren"
    | "author.bio._type"
    | "author.bio.children"
    | "author.bio.children._key"
    | "author.bio.children._type"
    | "author.bio.children.marks"
    | "author.bio.children.text"
    | "author.bio.list"
    | "author.bio.style"
    | "author.children"
    | "author.children.children"
    | "author.children.children.children"
    | "author.children.children.id"
    | "author.children.id"
    | "author.children.internal.content"
    | "author.children.internal.contentDigest"
    | "author.children.internal.contentFilePath"
    | "author.children.internal.description"
    | "author.children.internal.fieldOwners"
    | "author.children.internal.ignoreType"
    | "author.children.internal.mediaType"
    | "author.children.internal.owner"
    | "author.children.internal.type"
    | "author.children.parent.children"
    | "author.children.parent.id"
    | "author.id"
    | "author.image._key"
    | "author.image._rawAsset"
    | "author.image._rawCrop"
    | "author.image._rawHotspot"
    | "author.image._type"
    | "author.image.alt"
    | "author.image.asset._createdAt"
    | "author.image.asset._id"
    | "author.image.asset._key"
    | "author.image.asset._rawMetadata"
    | "author.image.asset._rawSource"
    | "author.image.asset._rev"
    | "author.image.asset._type"
    | "author.image.asset._updatedAt"
    | "author.image.asset.altText"
    | "author.image.asset.assetId"
    | "author.image.asset.children"
    | "author.image.asset.description"
    | "author.image.asset.extension"
    | "author.image.asset.filename"
    | "author.image.asset.filesize"
    | "author.image.asset.gatsbyImage"
    | "author.image.asset.gatsbyImageData"
    | "author.image.asset.height"
    | "author.image.asset.id"
    | "author.image.asset.label"
    | "author.image.asset.mimeType"
    | "author.image.asset.originalFilename"
    | "author.image.asset.path"
    | "author.image.asset.publicUrl"
    | "author.image.asset.sha1hash"
    | "author.image.asset.size"
    | "author.image.asset.title"
    | "author.image.asset.uploadId"
    | "author.image.asset.url"
    | "author.image.asset.width"
    | "author.image.caption"
    | "author.image.crop._key"
    | "author.image.crop._type"
    | "author.image.crop.bottom"
    | "author.image.crop.left"
    | "author.image.crop.right"
    | "author.image.crop.top"
    | "author.image.hotspot._key"
    | "author.image.hotspot._type"
    | "author.image.hotspot.height"
    | "author.image.hotspot.width"
    | "author.image.hotspot.x"
    | "author.image.hotspot.y"
    | "author.internal.content"
    | "author.internal.contentDigest"
    | "author.internal.contentFilePath"
    | "author.internal.description"
    | "author.internal.fieldOwners"
    | "author.internal.ignoreType"
    | "author.internal.mediaType"
    | "author.internal.owner"
    | "author.internal.type"
    | "author.name"
    | "author.parent.children"
    | "author.parent.children.children"
    | "author.parent.children.id"
    | "author.parent.id"
    | "author.parent.internal.content"
    | "author.parent.internal.contentDigest"
    | "author.parent.internal.contentFilePath"
    | "author.parent.internal.description"
    | "author.parent.internal.fieldOwners"
    | "author.parent.internal.ignoreType"
    | "author.parent.internal.mediaType"
    | "author.parent.internal.owner"
    | "author.parent.internal.type"
    | "author.parent.parent.children"
    | "author.parent.parent.id"
    | "author.slug._key"
    | "author.slug._type"
    | "author.slug.current"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "description"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "keywords"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "title";

  type SanitySiteSettingsFilterInput = {
    readonly _createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly _id: InputMaybe<StringQueryOperatorInput>;
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _rawAuthor: InputMaybe<JSONQueryOperatorInput>;
    readonly _rev: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly _updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly author: InputMaybe<SanityAuthorFilterInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly keywords: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SanitySiteSettingsGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SanitySiteSettingsEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SanitySiteSettingsGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SanitySiteSettings>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SanitySiteSettingsGroupConnection_distinctArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsGroupConnection_groupArgs = {
    field: SanitySiteSettingsFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SanitySiteSettingsGroupConnection_maxArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsGroupConnection_minArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsGroupConnection_sumArgs = {
    field: SanitySiteSettingsFieldsEnum;
  };

  type SanitySiteSettingsSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SanitySiteSettingsFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SanitySlug = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly current: Maybe<Scalars["String"]>;
  };

  type SanitySlugFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly current: InputMaybe<StringQueryOperatorInput>;
  };

  type SanitySpan = {
    readonly _key: Maybe<Scalars["String"]>;
    readonly _type: Maybe<Scalars["String"]>;
    readonly marks: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly text: Maybe<Scalars["String"]>;
  };

  type SanitySpanFilterInput = {
    readonly _key: InputMaybe<StringQueryOperatorInput>;
    readonly _type: InputMaybe<StringQueryOperatorInput>;
    readonly marks: InputMaybe<StringQueryOperatorInput>;
    readonly text: InputMaybe<StringQueryOperatorInput>;
  };

  type SanitySpanFilterListInput = {
    readonly elemMatch: InputMaybe<SanitySpanFilterInput>;
  };

  type Site = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: ReadonlyArray<Node>;
    readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
    readonly host: Maybe<Scalars["String"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly jsxRuntime: Maybe<Scalars["String"]>;
    readonly parent: Maybe<Node>;
    readonly pathPrefix: Maybe<Scalars["String"]>;
    readonly polyfill: Maybe<Scalars["Boolean"]>;
    readonly port: Maybe<Scalars["Int"]>;
    readonly siteMetadata: Maybe<SiteSiteMetadata>;
    readonly trailingSlash: Maybe<Scalars["String"]>;
  };

  type Site_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadata = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type SiteBuildMetadata_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadataConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteBuildMetadata>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataEdge = {
    readonly next: Maybe<SiteBuildMetadata>;
    readonly node: SiteBuildMetadata;
    readonly previous: Maybe<SiteBuildMetadata>;
  };

  type SiteBuildMetadataFieldsEnum =
    | "buildTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id";

  type SiteBuildMetadataFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type SiteBuildMetadataGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteBuildMetadata>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataGroupConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataGroupConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteEdge>;
    readonly group: ReadonlyArray<SiteGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Site>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteConnection_distinctArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_groupArgs = {
    field: SiteFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteConnection_maxArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_minArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_sumArgs = {
    field: SiteFieldsEnum;
  };

  type SiteEdge = {
    readonly next: Maybe<Site>;
    readonly node: Site;
    readonly previous: Maybe<Site>;
  };

  type SiteFieldsEnum =
    | "buildTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "graphqlTypegen.generateOnBuild"
    | "graphqlTypegen.typesOutputPath"
    | "host"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "jsxRuntime"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pathPrefix"
    | "polyfill"
    | "port"
    | "siteMetadata.description"
    | "siteMetadata.title"
    | "trailingSlash";

  type SiteFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    readonly host: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
    readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
    readonly port: InputMaybe<IntQueryOperatorInput>;
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunction = Node & {
    readonly absoluteCompiledFilePath: Scalars["String"];
    readonly children: ReadonlyArray<Node>;
    readonly functionRoute: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly originalAbsoluteFilePath: Scalars["String"];
    readonly originalRelativeFilePath: Scalars["String"];
    readonly parent: Maybe<Node>;
    readonly pluginName: Scalars["String"];
    readonly relativeCompiledFilePath: Scalars["String"];
  };

  type SiteFunctionConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteFunctionEdge>;
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteFunction>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_groupArgs = {
    field: SiteFunctionFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionConnection_maxArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_minArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_sumArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionEdge = {
    readonly next: Maybe<SiteFunction>;
    readonly node: SiteFunction;
    readonly previous: Maybe<SiteFunction>;
  };

  type SiteFunctionFieldsEnum =
    | "absoluteCompiledFilePath"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "functionRoute"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "matchPath"
    | "originalAbsoluteFilePath"
    | "originalRelativeFilePath"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pluginName"
    | "relativeCompiledFilePath";

  type SiteFunctionFilterInput = {
    readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginName: InputMaybe<StringQueryOperatorInput>;
    readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunctionGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteFunctionEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteFunction>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionGroupConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_groupArgs = {
    field: SiteFunctionFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionGroupConnection_maxArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_minArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_sumArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteGraphqlTypegen = {
    readonly generateOnBuild: Maybe<Scalars["Boolean"]>;
    readonly typesOutputPath: Maybe<Scalars["String"]>;
  };

  type SiteGraphqlTypegenFilterInput = {
    readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
    readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Site>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteGroupConnection_distinctArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_groupArgs = {
    field: SiteFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteGroupConnection_maxArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_minArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_sumArgs = {
    field: SiteFieldsEnum;
  };

  type SitePage = Node & {
    readonly children: ReadonlyArray<Node>;
    readonly component: Scalars["String"];
    readonly componentChunkName: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly internalComponentName: Scalars["String"];
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly pageContext: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly path: Scalars["String"];
    readonly pluginCreator: Maybe<SitePlugin>;
  };

  type SitePageConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePageEdge>;
    readonly group: ReadonlyArray<SitePageGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePage>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageConnection_distinctArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_groupArgs = {
    field: SitePageFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageConnection_maxArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_minArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_sumArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageEdge = {
    readonly next: Maybe<SitePage>;
    readonly node: SitePage;
    readonly previous: Maybe<SitePage>;
  };

  type SitePageFieldsEnum =
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "component"
    | "componentChunkName"
    | "id"
    | "internalComponentName"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "matchPath"
    | "pageContext"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "path"
    | "pluginCreator.browserAPIs"
    | "pluginCreator.children"
    | "pluginCreator.children.children"
    | "pluginCreator.children.children.children"
    | "pluginCreator.children.children.id"
    | "pluginCreator.children.id"
    | "pluginCreator.children.internal.content"
    | "pluginCreator.children.internal.contentDigest"
    | "pluginCreator.children.internal.contentFilePath"
    | "pluginCreator.children.internal.description"
    | "pluginCreator.children.internal.fieldOwners"
    | "pluginCreator.children.internal.ignoreType"
    | "pluginCreator.children.internal.mediaType"
    | "pluginCreator.children.internal.owner"
    | "pluginCreator.children.internal.type"
    | "pluginCreator.children.parent.children"
    | "pluginCreator.children.parent.id"
    | "pluginCreator.id"
    | "pluginCreator.internal.content"
    | "pluginCreator.internal.contentDigest"
    | "pluginCreator.internal.contentFilePath"
    | "pluginCreator.internal.description"
    | "pluginCreator.internal.fieldOwners"
    | "pluginCreator.internal.ignoreType"
    | "pluginCreator.internal.mediaType"
    | "pluginCreator.internal.owner"
    | "pluginCreator.internal.type"
    | "pluginCreator.name"
    | "pluginCreator.nodeAPIs"
    | "pluginCreator.packageJson"
    | "pluginCreator.parent.children"
    | "pluginCreator.parent.children.children"
    | "pluginCreator.parent.children.id"
    | "pluginCreator.parent.id"
    | "pluginCreator.parent.internal.content"
    | "pluginCreator.parent.internal.contentDigest"
    | "pluginCreator.parent.internal.contentFilePath"
    | "pluginCreator.parent.internal.description"
    | "pluginCreator.parent.internal.fieldOwners"
    | "pluginCreator.parent.internal.ignoreType"
    | "pluginCreator.parent.internal.mediaType"
    | "pluginCreator.parent.internal.owner"
    | "pluginCreator.parent.internal.type"
    | "pluginCreator.parent.parent.children"
    | "pluginCreator.parent.parent.id"
    | "pluginCreator.pluginFilepath"
    | "pluginCreator.pluginOptions"
    | "pluginCreator.resolve"
    | "pluginCreator.ssrAPIs"
    | "pluginCreator.version";

  type SitePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly component: InputMaybe<StringQueryOperatorInput>;
    readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly path: InputMaybe<StringQueryOperatorInput>;
    readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type SitePageGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePageEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SitePageGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePage>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageGroupConnection_distinctArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_groupArgs = {
    field: SitePageFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageGroupConnection_maxArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_minArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_sumArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SitePlugin = Node & {
    readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly name: Maybe<Scalars["String"]>;
    readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly packageJson: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly pluginFilepath: Maybe<Scalars["String"]>;
    readonly pluginOptions: Maybe<Scalars["JSON"]>;
    readonly resolve: Maybe<Scalars["String"]>;
    readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly version: Maybe<Scalars["String"]>;
  };

  type SitePluginConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePluginEdge>;
    readonly group: ReadonlyArray<SitePluginGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePlugin>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginConnection_distinctArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_groupArgs = {
    field: SitePluginFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginConnection_maxArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_minArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_sumArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginEdge = {
    readonly next: Maybe<SitePlugin>;
    readonly node: SitePlugin;
    readonly previous: Maybe<SitePlugin>;
  };

  type SitePluginFieldsEnum =
    | "browserAPIs"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "name"
    | "nodeAPIs"
    | "packageJson"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pluginFilepath"
    | "pluginOptions"
    | "resolve"
    | "ssrAPIs"
    | "version";

  type SitePluginFilterInput = {
    readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    readonly resolve: InputMaybe<StringQueryOperatorInput>;
    readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly version: InputMaybe<StringQueryOperatorInput>;
  };

  type SitePluginGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePluginEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SitePluginGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePlugin>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginGroupConnection_distinctArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_groupArgs = {
    field: SitePluginFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginGroupConnection_maxArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_minArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_sumArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteSiteMetadata = {
    readonly description: Maybe<Scalars["String"]>;
    readonly title: Maybe<Scalars["String"]>;
  };

  type SiteSiteMetadataFilterInput = {
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SortOrderEnum = "ASC" | "DESC";

  type StringQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["String"]>;
    readonly glob: InputMaybe<Scalars["String"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
    readonly ne: InputMaybe<Scalars["String"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
    readonly regex: InputMaybe<Scalars["String"]>;
  };

  type ArchivePageQueryQueryVariables = Exact<{ [key: string]: never }>;

  type ArchivePageQueryQuery = {
    readonly posts: {
      readonly edges: ReadonlyArray<{
        readonly node: {
          readonly id: string;
          readonly publishedAt: string | null;
          readonly title: string | null;
          readonly _rawExcerpt: Record<string, unknown> | null;
          readonly mainImage: {
            readonly alt: string | null;
            readonly crop: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly top: number | null;
              readonly bottom: number | null;
              readonly left: number | null;
              readonly right: number | null;
            } | null;
            readonly hotspot: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly x: number | null;
              readonly y: number | null;
              readonly height: number | null;
              readonly width: number | null;
            } | null;
            readonly asset: { readonly _id: string | null } | null;
          } | null;
          readonly slug: { readonly current: string | null } | null;
        };
      }>;
    };
  };

  type BlogPostTemplateQueryQueryVariables = Exact<{
    id: Scalars["String"];
  }>;

  type BlogPostTemplateQueryQuery = {
    readonly post: {
      readonly id: string;
      readonly publishedAt: string | null;
      readonly title: string | null;
      readonly _rawExcerpt: Record<string, unknown> | null;
      readonly _rawBody: Record<string, unknown> | null;
      readonly categories: ReadonlyArray<{
        readonly _id: string | null;
        readonly title: string | null;
      } | null> | null;
      readonly mainImage: {
        readonly alt: string | null;
        readonly crop: {
          readonly _key: string | null;
          readonly _type: string | null;
          readonly top: number | null;
          readonly bottom: number | null;
          readonly left: number | null;
          readonly right: number | null;
        } | null;
        readonly hotspot: {
          readonly _key: string | null;
          readonly _type: string | null;
          readonly x: number | null;
          readonly y: number | null;
          readonly height: number | null;
          readonly width: number | null;
        } | null;
        readonly asset: { readonly _id: string | null } | null;
      } | null;
      readonly slug: { readonly current: string | null } | null;
      readonly authors: ReadonlyArray<{
        readonly _key: string | null;
        readonly author: {
          readonly name: string | null;
          readonly image: {
            readonly crop: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly top: number | null;
              readonly bottom: number | null;
              readonly left: number | null;
              readonly right: number | null;
            } | null;
            readonly hotspot: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly x: number | null;
              readonly y: number | null;
              readonly height: number | null;
              readonly width: number | null;
            } | null;
            readonly asset: { readonly _id: string | null } | null;
          } | null;
        } | null;
      } | null> | null;
    } | null;
  };

  type DefaultSEOQueryQueryVariables = Exact<{ [key: string]: never }>;

  type DefaultSEOQueryQuery = {
    readonly site: {
      readonly title: string | null;
      readonly description: string | null;
      readonly keywords: ReadonlyArray<string | null> | null;
      readonly author: { readonly name: string | null } | null;
    } | null;
  };

  type IndexPageQueryQueryVariables = Exact<{ [key: string]: never }>;

  type IndexPageQueryQuery = {
    readonly site: {
      readonly title: string | null;
      readonly description: string | null;
      readonly keywords: ReadonlyArray<string | null> | null;
    } | null;
    readonly posts: {
      readonly edges: ReadonlyArray<{
        readonly node: {
          readonly id: string;
          readonly publishedAt: string | null;
          readonly title: string | null;
          readonly _rawExcerpt: Record<string, unknown> | null;
          readonly mainImage: {
            readonly alt: string | null;
            readonly crop: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly top: number | null;
              readonly bottom: number | null;
              readonly left: number | null;
              readonly right: number | null;
            } | null;
            readonly hotspot: {
              readonly _key: string | null;
              readonly _type: string | null;
              readonly x: number | null;
              readonly y: number | null;
              readonly height: number | null;
              readonly width: number | null;
            } | null;
            readonly asset: { readonly _id: string | null } | null;
          } | null;
          readonly slug: { readonly current: string | null } | null;
        };
      }>;
    };
  };

  type SanityImageFragment = {
    readonly crop: {
      readonly _key: string | null;
      readonly _type: string | null;
      readonly top: number | null;
      readonly bottom: number | null;
      readonly left: number | null;
      readonly right: number | null;
    } | null;
    readonly hotspot: {
      readonly _key: string | null;
      readonly _type: string | null;
      readonly x: number | null;
      readonly y: number | null;
      readonly height: number | null;
      readonly width: number | null;
    } | null;
    readonly asset: { readonly _id: string | null } | null;
  };

  type SiteTitleQueryQueryVariables = Exact<{ [key: string]: never }>;

  type SiteTitleQueryQuery = {
    readonly site: { readonly title: string | null } | null;
  };

  type Unnamed_1_QueryVariables = Exact<{ [key: string]: never }>;

  type Unnamed_1_Query = {
    readonly allSanityPost: {
      readonly edges: ReadonlyArray<{
        readonly node: {
          readonly id: string;
          readonly publishedAt: string | null;
          readonly slug: { readonly current: string | null } | null;
        };
      }>;
    };
  };
}
